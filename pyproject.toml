[tool.poetry]
name = "soar-asset-mocker"
version = "0.1.0"
description = "Asset Mocker enhances SOAR Connectors with ability to record and replay all HTTP communication done on Python socket level, allowing for faster playbook development"
authors = ["Michał Posłuszny <mposluszny@splunk.com>"]
readme = "README.md"
packages = [{include = "soar_asset_mocker"}]

[tool.poetry.scripts]
soar_asset_mocker = "soar_asset_mocker.cli.app:cli_app"

[tool.poetry.dependencies]
python = "^3.9"
vcrpy = "^6.0.2"
pyyaml = "^6.0.2"
dacite = "^1.8.1"
msgpack = "^1.1.0"
requests = "2.32.3"

[tool.poetry.group.dev.dependencies]
poetry = "^1.8.4"
poetry-plugin-export = "^1.8.0"
isort = "^5.13.2"
typer = "^0.12.5"
pytest = "^8.3.3"
pre-commit = "^4.0.1"
mypy = "^1.12.1"
types-PyYAML = "^6.0.12"
pytest-httpserver = "^1.1.0"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[virtualenvs]
in-project = true

[tool.black]
target-version = ['py39']
line-length = 120

[tool.isort]
profile = "black"
py_version=39
multi_line_output = 3
line_length = 120

[tool.coverage.report]
omit = [
    "tests/*",
    "__init__.py",
    "soar_libs.py"
    ]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]
